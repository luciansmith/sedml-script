/**
 * This file is designed to be compiled by the 'bison' program with the
 * command:
 *
 * bison -v sedml-script.ypp -o sedml-script.cpp
 *
 * The '-v' creates a file called 'sedml-script.output' which can be examined
 * to piece together the explicit logic of the parser.  The fact that no
 * '-o' option is used means that the default output file (sedml-script.tab.cpp)
 * will be produced.
 *
 * This command produces the file 'sedml-script.tab.cpp' which is included
 * explicitly in the sedml-script distribution.  Automatic creation of this
 * file is not incorporated into the CMake system; it must be
 * run by hand before change here will make it into the actual sedml-script
 * library.
 *
 * Bison v2.4.2 was used to create the .cpp file when this file was
 * first created.  It does not rely on odd features of the bison
 * parser, so other versions should work fine.
 *
 * This file currently compiles with zero reduce/reduce errors and one
 * shift/reduce warnings.
 */

%{
  //#define YYSTYPE double
#include <cassert>
#include <ctype.h>
#include <fstream>
#include <iostream>
#include <math.h>
#include <set>
#include <stdio.h>
#include <string>
#include <vector>

#include "registry.h"
//#include "module.h"
//#include "unitdef.h"
#include "stringx.h"
#include <sbml/math/ASTNode.h>
//#include "modelChange.h"

  using namespace std;
  using namespace sedmlscript;
  int sed_yylex(void);
  void sed_yyerror(char const *);
  Registry g_registry;
  int sed_yylloc_last_line = 1;
%}

/*Bison declarations */
%union {
  const string* word;
  vector<const string*>* words;
  ASTNode* astnode;
  double number;
  map<const string*, ASTNode*>* dict;
}

//%type   <words>         varOrKeyword
%type   <astnode>       node nodelist vector nodecolonlist

%left ANDWORD ORWORD         /* Boolean functions and, or */
%left '<' '>' '=' '!' /* Boolean comparison functions (gt, lt, eq, etc.) */
%left '-' '+'
%left '*' '/' '%'
%left NOT NEG UPLUS   /* Boolean negation (unary not), regular negation (unary minus), and unary plus (a no-op) */
%right '^'            /* exponentiation        */
%left '['
%left '('
%left '.'

%token YYEOF 0 "end of file"
%token  <number> NUM "number"
%token  <word> SEDWORD "element name"
%token  <word> TEXTSTRING "text string in quotes"
%token  <word> ERROR "an error"
%token  <word> INDENT "an indentation increase"
%token  <word> DEINDENT "an indentation decrease"
%token  <word> ANDWORD "the keyword 'and'"
%token  <word> ORWORD "the keyword 'or'"
%token  <word> NOTWORD "the keyword 'not'"
%token  <word> FORWORD "the keyword 'for'"
%token  <word> INWORD "the keyword 'in'"
%token  <word> IFWORD "the keyword 'if'"
%token  <word> DEFWORD "the keyword 'def'"
%token  <word> ELSEWORD "the keyword 'else'"
%token  <word> ELIFWORD "the keyword 'elif'"


%define api.prefix {sed_yy}
%debug
%error-verbose
%% /* The grammar: */

input:          /* empty */
        |       input equals lineend {}
        |       input execute lineend {}
        |       input block {}
        |       input lineend {}
        |       input error {YYABORT;} 
        |       input ERROR {YYABORT;}
        ;

lineend:        '\n' {}
        |       ';' {}
        ;

equals:         node '=' node        {if (g_registry.addEquals($1, $3)) YYABORT;}
        ;

execute:        node {if (g_registry.addExecute($1)) YYABORT;}
        ;

block:          IFWORD  node  ':' lineend INDENT {if (g_registry.startBlock($2, btIf)) YYABORT;}   input DEINDENT {if (g_registry.endBlock()) YYABORT;}
        |       ELIFWORD node ':' lineend INDENT {if (g_registry.startBlock($2, btElif)) YYABORT;} input DEINDENT {if (g_registry.endBlock()) YYABORT;}
        |       ELSEWORD      ':' lineend INDENT {if (g_registry.startElseBlock()) YYABORT;}       input DEINDENT {if (g_registry.endBlock()) YYABORT;}
        |       DEFWORD node  ':' lineend INDENT {if (g_registry.startBlock($2, btDef)) YYABORT;}  input DEINDENT {if (g_registry.endBlock()) YYABORT;}
        |       FORWORD nodelist INWORD node ':' lineend INDENT {if (g_registry.startForBlock($2, $4)) YYABORT;} input DEINDENT {if (g_registry.endBlock()) YYABORT;}
        ;

node:           NUM {
                  $$ = new ASTNode(); 
                  $$->setValue($1); 
                }
        |       SEDWORD {
                   $$ = new ASTNode();
                   $$->setName($1->c_str());
                   //The symbol is not used in any other mathematical context in the SBML model, so we can see if it matches a list of pre-defined names
                   ASTNodeType_t type = g_registry.getSymbolFor(*$1);
                   if (type != AST_UNKNOWN) $$->setType(type);
                   if (type==AST_REAL) {
                     if (g_registry.l3StrCmp(*$1, "inf"))          $$->setValue(numeric_limits<double>::infinity());
                     if (g_registry.l3StrCmp(*$1, "infinity"))     $$->setValue(numeric_limits<double>::infinity());
                     if (g_registry.l3StrCmp(*$1, "nan"))          $$->setValue(numeric_limits<double>::quiet_NaN());
                     if (g_registry.l3StrCmp(*$1, "notanumber"))   $$->setValue(numeric_limits<double>::quiet_NaN());
                   }
                }
        |       node '.' SEDWORD {
                  $$ = new ASTNode();
                  $$->setType(AST_LINEAR_ALGEBRA_SELECTOR);
                  $$->setClass("byDot");
                  $$->addChild($1);
                  ASTNode* subvar = new ASTNode();
                  subvar->setName($3->c_str());
                  $$->addChild(subvar);
                }
        |       node '[' node ']' {
                  $$ = new ASTNode();
                  $$->setType(AST_LINEAR_ALGEBRA_SELECTOR);
                  $$->setClass("byBrackets");
                  $$->addChild($1);
                  $$->addChild($3);
                }
        |       node '[' ']' {
                  sed_yyerror("Illegal to define empty square brackets as a selector.");
                  YYABORT;
                }
        |       TEXTSTRING {$$ = new ASTNode(); $$->setName($1->c_str());}
        |       '(' node ')'  {$$ = $2;}
        |       node '^' node {$$ = new ASTNode(AST_LOGICAL_XOR); $$->addChild($1); $$->addChild($3);}
        |       node '*' '*' node {$$ = new ASTNode(AST_POWER); $$->addChild($1); $$->addChild($4);}
        |       node '*' node {
                  if ($1->getType()==AST_TIMES) {
                    $$ = $1;
                    $$->addChild($3);
                  }
                  else {
                    $$ = new ASTNode(AST_TIMES);
                    $$->addChild($1);
                    $$->addChild($3);
                  }
                }
        |       node '+' node {
                  if ($1->getType()==AST_PLUS) {
                    $$ = $1;
                    $$->addChild($3);
                  }
                  else {
                    $$ = new ASTNode(AST_PLUS);
                    $$->addChild($1);
                    $$->addChild($3);
                  }
                }
        |       node '/' node {$$ = new ASTNode(AST_DIVIDE); $$->addChild($1); $$->addChild($3);}
        |       node '/' '/' node {
                  $$ = new ASTNode(AST_FUNCTION_FLOOR);
                  ASTNode* astn = new ASTNode(AST_DIVIDE);
                  astn->addChild($1);
                  $$->addChild($4);
                  $$->addChild(astn);
                }
        |       node '-' node {$$ = new ASTNode(AST_MINUS); $$->addChild($1); $$->addChild($3);}
        |       node '%' node {
                  $$ = new ASTNode(AST_FUNCTION_REM);
                  $$->addChild($1);
                  $$->addChild($3);
                }
        |       '+' node %prec UPLUS {$$ = $2;}
        |       '-' node %prec NEG {
                  $$ = new ASTNode(AST_MINUS);
                  $$->addChild($2);
                }
        |       node '>' node {$$ = g_registry.combineRelationalElements($1, $3, AST_RELATIONAL_GT);}
        |       node '<' node {$$ = g_registry.combineRelationalElements($1, $3, AST_RELATIONAL_LT);}
        |       node '>' '=' node {$$ = g_registry.combineRelationalElements($1, $4, AST_RELATIONAL_GEQ);}
        |       node '<' '=' node {$$ = g_registry.combineRelationalElements($1, $4, AST_RELATIONAL_LEQ);}
        |       node '=' '=' node {
                   $$ = g_registry.combineRelationalElements($1, $4, AST_RELATIONAL_EQ);
                   $$->setClass("boolean"); //To distinguish it from '='
                }
        |       node '!' '=' node {$$ = g_registry.combineRelationalElements($1, $4, AST_RELATIONAL_NEQ);}
        |       node '<' '>' node {$$ = g_registry.combineRelationalElements($1, $4, AST_RELATIONAL_NEQ);}
        |       node '>' '<' node {$$ = g_registry.combineRelationalElements($1, $4, AST_RELATIONAL_NEQ);}
        |       node ANDWORD node {
                  if ($1->getType()==AST_LOGICAL_AND) {
                    $$ = $1;
                    $$->addChild($3);
                  }
                  else {
                    $$ = new ASTNode(AST_LOGICAL_AND);
                    $$->addChild($1);
                    $$->addChild($3);
                  }
                }
        |       node ORWORD node {
                  if ($1->getType()==AST_LOGICAL_OR) {
                    $$ = $1;
                    $$->addChild($3);                  }
                  else {
                    $$ = new ASTNode(AST_LOGICAL_OR);
                    $$->addChild($1);
                    $$->addChild($3);
                  }
                }
        |       NOTWORD node %prec NOT {$$ = new ASTNode(AST_LOGICAL_NOT); $$->addChild($2);}
        |       node '(' nodelist ')' {
                  if($1->getType() == AST_NAME) {
                     $$ = $3;
                     string name = $1->getName();
                     delete $1;
                     $$->setName(name.c_str());
                     $$->setType(AST_FUNCTION);
                     if (g_registry.isDef(name) == false) {
                       //The symbol is not a function definition, so we can see if it matches a list of pre-defined names
                       ASTNodeType_t type = g_registry.getFunctionFor(name);
                       if (type != AST_UNKNOWN) $$->setType(type);
                       if (type==AST_FUNCTION_ROOT && g_registry.l3StrCmp(name, "sqrt")) {
                         //If the number of arguments is wrong, set an error now instead of waiting for later.
                         if ($$->getNumChildren() != 1) {
                           sed_yyerror("The function 'sqrt' takes exactly one argument.");
                           delete $$;
                           YYABORT;
                         }
                         //Add a '2' node before the existing child.
                         ASTNode* int2 = new ASTNode(AST_INTEGER);
                         int2->setValue(2);
                         $$->prependChild(int2);
                       }
                       if (type==AST_FUNCTION_POWER && g_registry.l3StrCmp(name, "sqr")) {
                         //Add a '2' node after the existing child.
                         ASTNode* int2 = new ASTNode(AST_INTEGER);
                         int2->setValue(2);
                         $$->addChild(int2);
                       }
                       if (type==AST_FUNCTION_LOG && g_registry.l3StrCmp(name, "log10")) {
                         //Add a '10' node before the existing child.
                         ASTNode* int10 = new ASTNode(AST_INTEGER);
                         int10->setValue(10);
                         $$->prependChild(int10);
                       }
                       else if (type==AST_FUNCTION_LOG && g_registry.l3StrCmp(name, "log")) {
                         //If there is exactly one argument, change it to ln (since math.log(x) is ln in python).
                         if ($$->getNumChildren() == 1) {
                           $$->setType(AST_FUNCTION_LN);
                         }
                       }
                       else if (type==AST_FUNCTION_LOG && $$->getNumChildren()==2) {
                         //Swap the arguments for MathML: SBML's infix has "log(10, 3)", but Python has "log(3, 10)".
                        ASTNode* moveme = $$->getChild(0);
                        $$->removeChild(0);
                         $$->addChild(moveme);
                       }
                     }
                     if (g_registry.checkNumArguments($$)) YYABORT;
                  }
                  else {
                    $3->setType(AST_APPLY_FUNCTION);
                    $3->insertChild(0, $1);
                    $$ = $3;
                  }
                }
        |       node '(' ')' {
                   if($1->getType() == AST_NAME) {
                     string name = $1->getName();
                     $1->setType(AST_FUNCTION);
                     ASTNodeType_t type = g_registry.getFunctionFor(name);
                     if (type != AST_UNKNOWN) $1->setType(type);
                     if (g_registry.checkNumArguments($1)) YYABORT;
                     $$ = $1;
                   }
                   else {
                     ASTNode* astn = new ASTNode(AST_APPLY_FUNCTION);
                     astn->addChild($1);
                     $$ = astn;
                   }
                }
        |       vector {$$ = $1;}
        ;

vector:         '[' ']' {$$ = new ASTNode(AST_LINEAR_ALGEBRA_VECTOR);}
        |       '[' nodelist ']' {$$ = $2; $$->setType(AST_LINEAR_ALGEBRA_VECTOR);}
        |       '{' '}' {$$ = new ASTNode(AST_SET_THEORY_SET);}
        |       '{' nodelist '}' {$$ = $2; $$->setType(AST_SET_THEORY_SET);}
        |       '{' nodecolonlist '}' {$$ = $2; }
        ;

nodelist:       node {$$ = new ASTNode(AST_FUNCTION); $$->addChild($1); }
        |       nodelist ',' node {$$ = $1;  $$->addChild($3);}
        |       nodelist ',' node '=' node {
                  $$ = $1;
                  ASTNode* astn = new ASTNode(AST_RELATIONAL_EQ);
                  astn->setClass("assignment"); //To distinguish it from '=='
                  astn->addChild($3);
                  astn->addChild($5);
                  $$->addChild(astn);
                }
        ;

nodecolonlist:  SEDWORD ':' node { 
                  $$ = new ASTNode(AST_SET_THEORY_SET);
                  $$->setClass("dictionary");
                  ASTNode* eq = new ASTNode(AST_RELATIONAL_EQ);
                  eq->setClass("key/value pair");
                  ASTNode* key= new ASTNode(AST_NAME);
                  key->setName((*$1).c_str());
                  eq->addChild(key);
                  eq->addChild($3);
                  $$->addChild(eq);
                }
        |       nodecolonlist ',' SEDWORD ':' node { 
                  $$ = $1;
                  ASTNode* eq = new ASTNode(AST_RELATIONAL_EQ);
                  eq->setClass("key/value pair");
                  ASTNode* key= new ASTNode(AST_NAME);
                  key->setName((*$3).c_str());
                  eq->addChild(key);
                  eq->addChild($5);
                  $$->addChild(eq);
                }
        ;

%%


void sed_yyerror(char const *s)
{
  stringstream err;
  err << "Error in line " << sed_yylloc_last_line << ": " << s;
  if (g_registry.getError()=="") {
    g_registry.setError(err.str(), sed_yylloc_last_line);
  }
}

int getLastIndent()
{
  size_t numIndents = g_registry.indents.size();
  if (numIndents > 0) {
    return g_registry.indents[numIndents-1];
  }
  return 0;
}

int sed_yylex(void)
{
  //First check to see if we need to immediately return a 'DEINDENT' based on the previous parse.
  int lastIndent = getLastIndent();
  if (lastIndent > g_registry.currIndent) {
    g_registry.indents.pop_back();
    lastIndent = getLastIndent();
    if (g_registry.currIndent > lastIndent) {
      //We didn't de-indent enough:
      g_registry.setError("The indentation decreased to an indentation level not previously seen.", sed_yylloc_last_line);
      return ERROR;
    }
    return DEINDENT;
  }
  char cc = 0;
  g_registry.input->get(cc);

  //If we're done with the file:
  if (g_registry.input->eof()) {
    if (g_registry.indents.size()>0) {
      g_registry.indents.pop_back();
      return DEINDENT;
    }
    if (g_registry.finalize()) {
      return ERROR;
    }
    return 0;
  }
  if (!g_registry.input->good()) {
    //Something else went wrong!
    g_registry.setError("Unparseable content in line " + g_registry.ftoa(sed_yylloc_last_line) + ".", sed_yylloc_last_line);
    return ERROR;
  }

  // Read white space.
  if (g_registry.midline) {
    //Skip whitespace.
    while ((cc == ' ' ||
            cc == '\t') &&
           !g_registry.input->eof()) {
      g_registry.input->get(cc);
    }
    if (g_registry.input->eof()) return sed_yylex();
  }
  else {
    //We're at the beginning of a line: check for indentation change:
    g_registry.currIndent = 0;
    while ((cc == ' ' ||
            cc == '\t') &&
           !g_registry.input->eof()) {
      if (cc==' ') {
        g_registry.currIndent += 1;
      }
      if (cc=='\t') {
        g_registry.currIndent += 4;
      }
      g_registry.input->get(cc);
    }
    if (cc=='#') {
      //It's a comment.
      while (cc != '\n' && !g_registry.input->eof()) {
        g_registry.input->get(cc);
        //At some point, maybe save comments?
      }
      ++sed_yylloc_last_line;
      g_registry.currIndent = getLastIndent();
      return sed_yylex();
    }
    if (cc=='\r' || cc=='\n') {
      //It was a blank line.
      ++sed_yylloc_last_line;
      g_registry.currIndent = getLastIndent();
      return sed_yylex();
    }
    //Back up: we parsed all the whitespace.
    g_registry.input->unget();
    g_registry.midline = true;

    //Compare this indent with the current suite.
    int lastIndent = getLastIndent();
    if (g_registry.currIndent == lastIndent) {
      //We're good: keep parsing.
      return sed_yylex();
    }
    if (g_registry.currIndent > lastIndent) {
      //We just increased the indent: return INDENT
      g_registry.indents.push_back(g_registry.currIndent);
      return INDENT;
    }
    //Otherwise, we decreased the indent.
    int lastLastIndent = 0;
    size_t numIndents = g_registry.indents.size();
    if (numIndents > 1) {
      lastLastIndent = g_registry.indents[numIndents-2];
    }
    if (g_registry.currIndent > lastLastIndent) {
      //We didn't de-indent enough:
      g_registry.setError("The indentation decreased to an indentation level not previously seen.", sed_yylloc_last_line);
      return ERROR;
    }
    g_registry.indents.pop_back();
    return DEINDENT;
  }

  // Skip carriage returns after '\':
  if (cc == '\\') {
    g_registry.input->get(cc);
    if (cc == '\r' || cc == '\n' || cc == ' ') {
      while ((cc == '\r' || cc == '\n' || cc == ' ') && !g_registry.input->eof()) {
        g_registry.input->get(cc);
      }
      ++sed_yylloc_last_line;
      g_registry.input->unget();
      return sed_yylex();
    }
    else {
      g_registry.input->unget();
      cc = '\\';
    }
 }

  // Parse words
  if (cc > 0 && cc < 256 && (isalpha(cc) || cc == '_')) {
    string word;
    while (cc > 0 && cc < 256 && (isalpha(cc) || isdigit(cc) || cc == '_') && !g_registry.input->eof()) {
      word += cc;
      g_registry.input->get(cc);
    }
    if (!g_registry.input->eof()) {
      g_registry.input->unget();
    }
    if (word == "and") {
      return ANDWORD;
    }
    if (word == "or") {
      return ORWORD;
    }
    if (word == "not") {
      return NOTWORD;
    }
    if (word == "for") {
      return FORWORD;
    }
    if (word == "in") {
      return INWORD;
    }
    if (word == "if") {
      return IFWORD;
    }
    if (word == "def") {
      return DEFWORD;
    }
    if (word == "else") {
      return ELSEWORD;
    }
    if (word == "elif") {
      return ELIFWORD;
    }
    sed_yylval.word = g_registry.addWord(word);
    //cout << "\tRead word '" << word << "'." << endl;
    if (word == "vs" && g_registry.input->peek() == '.') {
      g_registry.input->get(cc);
    }
    return SEDWORD;
  }

  // Parse numbers
  if (cc > 0 && cc < 256 && (isdigit(cc) || (cc=='.' && isdigit(g_registry.input->peek())))) {
    if (cc=='.') {
      //If the element *before* the '.' was a-z, we just return '.'.  This is for things like 'kisao.424':
      streampos here = g_registry.input->tellg();
      if (here>0) {
        g_registry.input->unget();
        g_registry.input->unget();
        char prev;
        g_registry.input->get(prev);
        g_registry.input->get(cc);
        if (('a' <= prev && prev <= 'z') || ('A' <= prev && prev <= 'Z')) {
          return cc;
        }
      }
    }
    double number;
    g_registry.input->unget();
    streampos numbegin = g_registry.input->tellg();
    *g_registry.input >> number;
    streampos numend = g_registry.input->tellg();
    if (g_registry.input->fail()) {
      //The gcc 4.4.3 parser fails if there's an 'e' after a number with no exponent.
      g_registry.input->clear();
      g_registry.input->seekg(numbegin);
      int numint;
      *g_registry.input >> numint;
      sed_yylval.number = numint;
      if (g_registry.input->peek() == '.') {
        g_registry.input->get();
        *g_registry.input >> numint;
        double fraction = numint;
        while (fraction >= 1.0) {
          fraction = fraction/10;
        }
        sed_yylval.number += fraction;
      }
      return NUM;
    }
    assert(g_registry.input->good());
    sed_yylval.number = number;
    //However, pre-4.4.3 parsers would read the 'e' anyway, and we don't want it to, so unget the 'e'.
    g_registry.input->unget();
    if (!g_registry.input->good()) {
      //Sometimes you can't do this?  For some reason?  If this happens we'll assume there was no 'e'.
      g_registry.input->clear();
    }
    else {
      g_registry.input->get(cc);
      if (cc == 'e' || cc == 'E') {
        g_registry.input->unget();
      }
      if (cc == '.') {
        //We might be in a 'kisao.43.c' situation.  Which is wrong, but at least clear what was meant.
        char next = g_registry.input->peek();
        if (('a' <= next && next <= 'z') || ('A' <= next && next <= 'Z')) {
          g_registry.input->unget();
        }
      }
    }
    return NUM;
  }

  //Skip comments:
  if (cc == '#') {
      while (cc != '\n' && cc != '\r' && !g_registry.input->eof()) {
        g_registry.input->get(cc);
      }
      if (!g_registry.input->eof()) {
        g_registry.input->unget();
      }
      return sed_yylex();
  }

  //Parse text strings
  if (cc == '"' || cc=='\'') {
    string textstring;
    long ccount = 0;
    char match = cc;
    textstring += match;
    g_registry.input->get(cc);
    while (cc != match && cc != '\r' && cc != '\n' && !g_registry.input->eof()) {
      textstring += cc;
      ccount++;
      g_registry.input->get(cc);
    }
    textstring += match;
    if (cc == '\r' || cc == '\n' || g_registry.input->eof()) {
      for (; ccount > 0; ccount--) {
        g_registry.input->unget();
      }
      cc = match;
    }
    else {
      sed_yylval.word = g_registry.addWord(textstring);
      return TEXTSTRING;
    }
  }

  //This converts PC and Mac end-of-line characters to \n:
  if (cc == '\r') {
    g_registry.input->get(cc);
    if (cc != '\n') {
      g_registry.input->unget();
    }
    cc = '\n';
  }
  if (cc == '\n') {
    ++sed_yylloc_last_line;
    g_registry.midline = false;
  }
  return cc;
}
